name: openShift_deploy

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  GITEA_REF: ${{ gitea.ref }}
  GITEA_REPOSITORY: ${{ gitea.repository.full_name }} 
  IMAGE_REGISTRY: ${{ secrets.REGISTRY_URL }}
  # Caso o seu URL de clone seja diferente daonde esta partindo a Action, configure uma variavel
  GITEA_URL: ${{ vars.GIT_URL }}
  PORT: 8080

on:
  push:
    branches:
      - 'hotfix**'

jobs:
  openshift-ci-cd:
    name: Deploy to OpenShift
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set environment variables
        run: |
          echo "Debug: GITEA_REF=$GITEA_REF"
          BRANCH_NAME=${GITEA_REF##*/}
          NAMESPACE="${REPO_NAME}-${BRANCH_NAME}"
          
          SAFE_BRANCH_NAME=$(echo ${BRANCH_NAME} | sed -e 's/[^a-zA-Z0-9-]/-/g' -e 's/^[-]*//' -e 's/[-]*$//')

          REPO_URL=$(git config --get remote.origin.url)

          REPO_URL="${REPO_URL%/}"

          if [[ ! "$REPO_URL" =~ \.git$ ]]; then
            REPO_URL="${REPO_URL}.git"
          fi

          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITEA_ENV
          echo "OPENSHIFT_NAMESPACE=${GITHUB_REPOSITORY##*/}-${SAFE_BRANCH_NAME}" >> $GITEA_ENV
          echo "APP_NAME=${GITHUB_REPOSITORY##*/}-${SAFE_BRANCH_NAME}" >> $GITEA_ENV
          echo "IMAGE_TAGS=${BRANCH_NAME}" >> $GITEA_ENV

          echo "GITEA_CLONE_URL=${REPO_URL}" >> $GITEA_ENV



          echo "IMAGE_TAGS=${BRANCH_NAME}" >> $GITEA_ENV
          echo "Debug: Final OPENSHIFT_NAMESPACE=$(cat $GITEA_ENV | grep OPENSHIFT_NAMESPACE)"

      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz
          tar xzf openshift-client-linux.tar.gz
          sudo mv oc /usr/local/bin/
          oc version

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }} --insecure-skip-tls-verify=true
          oc project ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Create namespace if not exists
        run: |
          if ! oc get namespace ${{ env.OPENSHIFT_NAMESPACE }} 2>/dev/null; then
            oc create namespace ${{ env.OPENSHIFT_NAMESPACE }}
            oc project ${{ env.OPENSHIFT_NAMESPACE }}
            oc adm policy add-role-to-group admin OcpDevAdmin
          fi

      - name: Create Service Account RoleBinding
        run: |
          # Criar a ServiceAccount caso não exista
          oc create sa ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}
          # Neste caso um Cluster admin irá configurar o Service account criado com as devidas permissões, Existe cenarios que as aplicações apontaram para um unico rolebinding ou copiam as permissoes de um outro

      - name: Create ConfigMap
        run: |
          # Configurar Variaveis de ambiente.
          oc apply -f - -n ${{ env.OPENSHIFT_NAMESPACE }} <<EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: ${{ env.APP_NAME }}-config
          data:
            DB_PORT: '3306'
            DB_HOST: 0.0.0.0
            ENVIRONMENT: dev
            DB_USERNAME: username
            DB_DATABASE: banco
          EOF

      - name: Create BuildConfig, Secret and start build
        run: |
          # Criar o Secret no OpenShift com as credenciais do Git
          oc create secret generic gitrepo \
            --from-literal=username=${{ secrets.GIT_USERNAME }} \
            --from-literal=password=${{ secrets.GIT_PASSWORD }} \
            --namespace=${{ env.OPENSHIFT_NAMESPACE }} || true

          # Criar o Secret no OpenShift como por exemplo DB_PASSWORD, SSH KEYS, ETC...
          oc create secret generic ${{ env.OPENSHIFT_NAMESPACE }}-secret \
            --from-literal=password=${{ secrets.DB_PASSWORD }} \
            --namespace=${{ env.OPENSHIFT_NAMESPACE }} || true
          
          # Criar o BuildConfig se não existir
          oc apply -f - -n ${{ env.OPENSHIFT_NAMESPACE }} <<EOF
          apiVersion: build.openshift.io/v1
          kind: BuildConfig
          metadata:
            name: ${{ env.APP_NAME }}
          spec:
            source:
              git:
                uri: ${REPO_URL}
                ref: ${{ env.BRANCH_NAME }}
              sourceSecret:
                name: gitrepo
              contextDir: "."
            strategy:
              type: Docker
              dockerStrategy:
                dockerfilePath: Containerfile
            output:
              to:
                kind: ImageStreamTag
                name: ${{ env.APP_NAME }}:latest
          EOF

          # Criar ImageStream se não existir
          oc apply -f - -n ${{ env.OPENSHIFT_NAMESPACE }} <<EOF
          apiVersion: image.openshift.io/v1
          kind: ImageStream
          metadata:
            name: ${{ env.APP_NAME }}
          spec:
            lookupPolicy:
              local: true
          EOF

          # Iniciar o build
          oc start-build ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} --follow
          
      - name: Deploy application
        run: |       
          # Criar o deployment se não existir
          oc apply -f - -n ${{ env.OPENSHIFT_NAMESPACE }} <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ env.APP_NAME }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${{ env.APP_NAME }}
            template:
              metadata:
                labels:
                  app: ${{ env.APP_NAME }}
              spec:
                containers:
                - name: ${{ env.APP_NAME }}
                  image: ${{ env.IMAGE_REGISTRY }}/${{ env.OPENSHIFT_NAMESPACE }}/${{ env.APP_NAME }}:latest
                  ports:
                  - containerPort: ${{ env.PORT }}
          EOF

          # Criar o service se não existir
          oc apply -f - -n ${{ env.OPENSHIFT_NAMESPACE }} <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ env.APP_NAME }}
          spec:
            ports:
            - port: ${{ env.PORT }}
              targetPort: ${{ env.PORT }}
            selector:
              app: ${{ env.APP_NAME }}
          EOF

          # Criar a route se não existir
          oc apply -f - -n ${{ env.OPENSHIFT_NAMESPACE }} <<EOF
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: ${{ env.APP_NAME }}
          spec:
            port:
              targetPort: ${{ env.PORT }}
            to:
              kind: Service
              name: ${{ env.APP_NAME }}
          EOF

          # Trigger acionada para ativar deploy automatico.
          echo "Applying trigger for deployment: ${{ env.APP_NAME }} in namespace: ${{ env.OPENSHIFT_NAMESPACE }}"
          oc set triggers deployment/${{ env.APP_NAME } --from-image=${{ env.APP_NAME }/${{ env.APP_NAME }:latest --containers=${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}
          

          ROUTE_URL=$(oc get route ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} -o jsonpath='{.spec.host}')
          
          echo "======================== Your application is available at: ========================"
          echo "https://${ROUTE_URL}"
          echo "==================================================================================="
          echo
          echo "Your app can be taken down with: \"oc delete all -l app=${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}\""
          
          # Adicionar a URL ao commit
          git config --global user.email "pipeline@gitea.com"
          git config --global user.name "Pipeline Bot"
          echo "A url exposta é: https://${ROUTE_URL}" >> deployment.txt
          git add deployment.txt
          git commit -m "Deploy: A url exposta é https://${ROUTE_URL}"
          git push origin ${{ env.BRANCH_NAME }}

